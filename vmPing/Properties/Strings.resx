<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_Ping" xml:space="preserve">
    <value>Ping</value>
  </data>
  <data name="Button_Stop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="DialogButton_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DialogButton_Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="DialogButton_New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="DialogButton_OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="DialogButton_Overwrite" xml:space="preserve">
    <value>Overwrite</value>
  </data>
  <data name="DialogButton_Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="DialogButton_Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="DialogTitle_ConfirmDelete" xml:space="preserve">
    <value>Confirm Delete</value>
  </data>
  <data name="DialogTitle_Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="DialogTitle_Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="EditAlias_AliasFor" xml:space="preserve">
    <value>Alias for:</value>
    <comment>Parsed as:  Alias for: {hostname}</comment>
  </data>
  <data name="EditFavorite_Rename" xml:space="preserve">
    <value>Rename:</value>
    <comment>Parsed as:  Rename: {FavoriteTitle}</comment>
  </data>
  <data name="ManageAliases_Alias" xml:space="preserve">
    <value>Alias</value>
  </data>
  <data name="ManageAliases_Header" xml:space="preserve">
    <value>Manage Aliases</value>
  </data>
  <data name="ManageAliases_Host" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="ManageAliases_Warn_DeleteA" xml:space="preserve">
    <value>Are you sure you want to remove</value>
    <comment>Parsed as:  [DeleteA] {AliasName} [DeleteB]</comment>
  </data>
  <data name="ManageAliases_Warn_DeleteB" xml:space="preserve">
    <value>from your aliases?</value>
    <comment>/// See ManageFavorites_Warn_DeleteA for usage when translating</comment>
  </data>
  <data name="ManageAliases_WindowTitle" xml:space="preserve">
    <value>vmPing - Aliases</value>
  </data>
  <data name="ManageFavorites_Header" xml:space="preserve">
    <value>Manage Favorites</value>
  </data>
  <data name="ManageFavorites_HostsInSet" xml:space="preserve">
    <value>Hosts in Set</value>
  </data>
  <data name="ManageFavorites_Warn_DeleteA" xml:space="preserve">
    <value>Are you sure you want to remove</value>
    <comment>Parsed as:  [DeleteA] {FavoriteTitle} [DeleteB]  /// Translating: If this format does not make sense for your locale, make OverwriteA an empty string and put your translated message in OverwriteB</comment>
  </data>
  <data name="ManageFavorites_Warn_DeleteB" xml:space="preserve">
    <value>from your favorites?</value>
  </data>
  <data name="ManageFavorites_WindowTitle" xml:space="preserve">
    <value>vmPing - Favorites</value>
  </data>
  <data name="Menu_Aliases" xml:space="preserve">
    <value>Aliases</value>
  </data>
  <data name="Menu_Always" xml:space="preserve">
    <value>Always</value>
  </data>
  <data name="Menu_FavoriteSets" xml:space="preserve">
    <value>Favorite Sets</value>
  </data>
  <data name="Menu_FloodHost" xml:space="preserve">
    <value>Flood Host</value>
  </data>
  <data name="Menu_Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Menu_ManageAliases" xml:space="preserve">
    <value>Manage Aliases</value>
  </data>
  <data name="Menu_ManageFavorites" xml:space="preserve">
    <value>Manage Favorites</value>
  </data>
  <data name="Menu_Never" xml:space="preserve">
    <value>Never</value>
  </data>
  <data name="Menu_Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Menu_PopupNotifications" xml:space="preserve">
    <value>Popup Notifications</value>
  </data>
  <data name="Menu_SaveToFavorites" xml:space="preserve">
    <value>Save Current Layout to Favorites</value>
  </data>
  <data name="Menu_StatusHistory" xml:space="preserve">
    <value>Status History</value>
  </data>
  <data name="Menu_TraceRoute" xml:space="preserve">
    <value>Trace Route</value>
  </data>
  <data name="Menu_WhenMinimized" xml:space="preserve">
    <value>When Minimized</value>
  </data>
  <data name="NewAlias_Alias" xml:space="preserve">
    <value>Alias</value>
  </data>
  <data name="NewAlias_Error_InvalidAlias" xml:space="preserve">
    <value>Please enter a valid alias.</value>
  </data>
  <data name="NewAlias_Error_InvalidHost" xml:space="preserve">
    <value>Please enter a valid host name.</value>
  </data>
  <data name="NewAlias_Header" xml:space="preserve">
    <value>New Alias</value>
  </data>
  <data name="NewAlias_Host" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="NewFavorite_Error_InvalidName" xml:space="preserve">
    <value>Please enter a valid name for this favorite set.</value>
  </data>
  <data name="NewFavorite_Header" xml:space="preserve">
    <value>Create a Favorite Set</value>
  </data>
  <data name="NewFavorite_SelectedHostsHeader" xml:space="preserve">
    <value>Selected Hosts</value>
  </data>
  <data name="NewFavorite_Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="NewFavorite_Warn_AlreadyExists" xml:space="preserve">
    <value>already exists.  Would you like to overwrite?</value>
    <comment>Parsed as:  {Title} already exists.  Would you like to overwrite?</comment>
  </data>
  <data name="StatusChange_Down" xml:space="preserve">
    <value>DOWN</value>
  </data>
  <data name="StatusChange_Error" xml:space="preserve">
    <value>[ERROR]</value>
  </data>
  <data name="StatusChange_Up" xml:space="preserve">
    <value>UP</value>
  </data>
  <data name="StatusChange_Verb" xml:space="preserve">
    <value>is</value>
    <comment>Example:   127.0.0.1 "is" DOWN</comment>
  </data>
  <data name="StatusHistory_NoChanges" xml:space="preserve">
    <value>No status changes</value>
  </data>
  <data name="StatusHistory_NoChangesDescription" xml:space="preserve">
    <value>When a host changes between down or up, it'll show up here</value>
  </data>
  <data name="StatusHistory_WindowTitle" xml:space="preserve">
    <value>vmPing - Status History</value>
  </data>
  <data name="Toolbar_Add" xml:space="preserve">
    <value>_Add Host</value>
  </data>
  <data name="Toolbar_Columns" xml:space="preserve">
    <value>_Columns</value>
  </data>
  <data name="Toolbar_StartAll" xml:space="preserve">
    <value>_Start All (F5)</value>
  </data>
  <data name="Toolbar_StopAll" xml:space="preserve">
    <value>_Stop All (F5)</value>
  </data>
  <data name="Tooltip_Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Tooltip_EditAlias" xml:space="preserve">
    <value>Edit alias</value>
  </data>
  <data name="Tooltip_IsolatedView" xml:space="preserve">
    <value>Open isolated view</value>
  </data>
</root>